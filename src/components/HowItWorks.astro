---
import Link from "./Link.astro";
import {SITE_DATA} from "@/consts"
---
<section class="bg-base-100 py-20" id="how-it-works" class:list={Astro.props.class}>
    <div class="flex flex-col gap-10 max-w-7xl mx-auto w-full">
        <div class="space-y-4">
            <h2 class="text-3xl md:text-4xl font-bold capitalize">
                How It Works?
            </h2>
            <p class="text-lg">
                That's a good question! Here's a brief explanation of how it works. It's simple, <span class="font-bold">really</span>.
            </p>
            <p class="text-lg">
                First, your customers create an email template using the <Link href={SITE_DATA.githubUrl} class="link link-primary">Angular application</Link>.
                Then, they convert the template to HTML using the <Link href={SITE_DATA.converterUrl} class="link link-primary">convertor</Link> by clicking the save button, and voilà! The email template is ready to be used.
            </p>
            <p class="text-lg">You can programmatically autosave the template or leave it to your customers to do it manually—it's up to you!</p>
            <p class="text-lg">This way, the size of Angular application bundles is reduced, and the email templates are more flexible and easier to manage. Oh, and since the convertor is running on Nodejs, you can add more features to it, like sending the email directly from the server or saving the template to a database.</p>
            <p class="text-lg">
                And yes, the <Link href={SITE_DATA.converterUrl} class="link link-primary">converter</Link> is also open source, so you can contribute to it or use it in your projects.
            </p>
            <p class="text-lg">
                I almost forgot! We have an <strong><Link href="https://github.com/wanoo21/Angular-mjml-output/tree/master/mjml-to-email" class="link-primary">experimental feature</Link> that allows you to convert the HTML template to MJML</strong>, a markup language that makes it easier to create responsive email templates. This works mostly for HTML templates that were generated by MJML in the first place, so I'm not sure where this feature is going, but it's there. Feel free to experiment with it; nevertheless, it's a cool feature to have.
            </p>
        </div>
    </div>
</section>
